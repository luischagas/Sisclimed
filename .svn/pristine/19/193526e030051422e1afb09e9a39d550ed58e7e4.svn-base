function BarrettMu(m) { this.modulus = biCopy(m); this.k = biHighIndex(this.modulus) + 1; var a = new BigInt(); a.digits[2 * this.k] = 1; this.mu = biDivide(a, this.modulus); this.bkplus1 = new BigInt(); this.bkplus1.digits[this.k + 1] = 1; this.modulo = BarrettMu_modulo; this.multiplyMod = BarrettMu_multiplyMod; this.powMod = BarrettMu_powMod } function BarrettMu_modulo(x) { var a = biDivideByRadixPower(x, this.k - 1); var b = biMultiply(a, this.mu); var c = biDivideByRadixPower(b, this.k + 1); var d = biModuloByRadixPower(x, this.k + 1); var e = biMultiply(c, this.modulus); var f = biModuloByRadixPower(e, this.k + 1); var r = biSubtract(d, f); if (r.isNeg) { r = biAdd(r, this.bkplus1) } var g = biCompare(r, this.modulus) >= 0; while (g) { r = biSubtract(r, this.modulus); g = biCompare(r, this.modulus) >= 0 } return r } function BarrettMu_multiplyMod(x, y) { var a = biMultiply(x, y); return this.modulo(a) } function BarrettMu_powMod(x, y) { var b = new BigInt(); b.digits[0] = 1; var a = x; var k = y; while (true) { if ((k.digits[0] & 1) != 0) b = this.multiplyMod(b, a); k = biShiftRight(k, 1); if (k.digits[0] == 0 && biHighIndex(k) == 0) break; a = this.multiplyMod(a, a) } return b }