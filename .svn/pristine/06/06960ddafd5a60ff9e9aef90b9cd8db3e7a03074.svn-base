ko.extenders.ValidaLogin = function (target) {
    var result = ko.computed({
        read: target,
        write: function (newValue) {
            var current = target()

            if (newValue !== current) {
                msgLogin("");
                target(newValue);
                target.notifySubscribers(newValue);

                if (loginKO) {
                    loginKO.validLogin(loginKO.username().length > 0 && loginKO.password().length > 0);
                }
            }
        }
    }).extend({ notify: 'always' });;

    result(target());

    return result;
};

var PKEY = null;
var logging = false;
var loginKO = new loginData();
var pswKO = new UserID();

function UserID() {    
    this.password = ko.observable();
    this.newPassword = ko.observable();
    this.newPasswordB = ko.observable();
};

var enterSearch = function (d, e) {
    if (e.keyCode == 13 && loginKO.validLogin()) {
        $('#btnLogin').click();
    }
    return true;
};

$(function () {
    var logged = getAuthorization();

    var datako = $("[data-bind*='loginKO']");

    for (ct = 0; ct < datako.length; ct++) {
        var datakoelement = datako[ct];
        ko.applyBindings(loginKO, datakoelement);
    }

    datako = $("[data-bind*='pswKO']");
    for (ct = 0; ct < datako.length; ct++) {
        var datakoelement = datako[ct];
        ko.applyBindings(pswKO, datakoelement);
    }

    $('#btnLogin').click(function () {
        msgLogin("");

        if (PKEY) {
            Login(PKEY, 'LGN');
        } else {
            GetKeysAndLogin('LGN');
        }
    });

    $('#txtUsername').focus();

    $("#btnChangePassword").click(function () {
        var passwordNew = pswKO.newPassword();
        var password = pswKO.password();
        var repassordNew = pswKO.newPasswordB();
        var regex = new RegExp("^[a-zA-Z0-9!@#$%\^&*)(+=._-]*$")
   
        if (password == passwordNew) {
            AlertServerError('As senhas não podem ser iguais!'); 
        } else if (passwordNew.indexOf(" ") >= 0) {
            AlertServerError('A senha não pode conter espaço em branco!');        
        } else if (!regex.test(passwordNew)) {
            AlertServerError('A senha não pode conter acentos!');
        } else if (passwordNew.length < 4) {
            AlertServerError('A senha deve conter mais que 4 caracteres!');
        } else if (passwordNew != repassordNew) {
            AlertServerError('As senhas não conferem!');

        } else {
            ResetLocalUserPassword();
        }
        pswKO.password("");
        pswKO.newPassword("");
        pswKO.newPasswordB("");
    });
});

function Logout() {
    getSID = getCookie('SID');

    if (getSID) {
        if (getSID.length > 0) {
            rsAjaxService.POST('CSS', '../' + SVC_URL, "Logout", rsAjaxService.ToJSON('SID', base64_decode(getSID)));
        }
    }

    removeCookie("SID");

    if (Modernizr.localstorage) {
        localStorage.removeItem("PKEY");
    } else {
        removeCookie("PKEY");
    }
    sessionStorage.removeItem('Ramal');
    goToIndex();
};

function msgLogin(message) {
    $("#spnMesssage").text(message);
};

function loginData() {
    this.username = ko.observable("").extend({ ValidaLogin: null });
    this.password = ko.observable("").extend({ ValidaLogin: null });
    this.validLogin = ko.observable(false);    
    this.email = null;
};

function setAuthorization(data, alive) {
    try {
        setMaxDigits(131);

        this.SID = data.split("|")[0];
        this.EEP = data.split("|")[1];
        this.MDS = data.split("|")[2];

        if (Modernizr.localstorage) {
            localStorage.PKEY = base64_encode(JSON.stringify(this));
        } else {
            setCookie('PKEY', base64_encode(JSON.stringify(this)), (alive) ? 1440 : null);
        }

        setCookie('SID', base64_encode(this.SID), (alive) ? 1440 : null);

        this.KEY = new RSAKeyPair(this.EEP, "", this.MDS);
    } catch (ex) {
        PKEY = null;
    }
};

function getAuthorization() {
    try {
        var getSID, ckPKEY;

        getSID = getCookie('SID');

        if (getSID) {

            getSID = base64_decode(getSID);

            if (Modernizr.localstorage) {
                ckPKEY = localStorage.PKEY;
                if (ckPKEY) {
                    getPKEY = JSON.parse(base64_decode(ckPKEY));
                } else { return false; }
            } else {
                ckPKEY = getCookie('PKEY');
                if (ckPKEY) {
                    getPKEY = JSON.parse(base64_decode(ckPKEY));
                } else { return false; }
            }

            if (getPKEY.SID == getSID) {

                setMaxDigits(131);

                this.KEY = new RSAKeyPair(getPKEY.EEP, "", getPKEY.MDS);

                return true;

            } else {
                return false;
            }
        } else {
            return false;
        }
    } catch (ex) {
        return false;
    }
};

function GetKeysAndLogin(TYPE) {
    if (loginKO.validLogin()) {

        $('#divLoaderLogin').show();

        rsAjaxService.POST('CSS', '../' + SVC_URL, "CreateSession", null,
            function (data, ajaxOptions, response) {
                if (data != '-1') {
                    if (response.status == 200) {
                        PKEY = new setAuthorization(base64_decode(data), $('#ckhSession').is(':checked'));
                        PKEY.TYPE = TYPE;
                    }
                }
            },
            function (xhr, ajaxOptions, thrownError) {
                msgLogin("Erro ao realizar login");
                $('#divLoaderLogin').hide();
            },
            function () {
                if (PKEY) {
                    Login(PKEY);
                } else {
                    msgLogin("Erro de acesso ao realizar login");
                }
            }
        );
    }
};

function Login(PKEY) {
    if (!logging) {

        logging = true;

        $('#divLoaderLogin').show();

        var words, credentials;

        if (PKEY.TYPE == 'LGN') { words = base64_encode(loginKO.username()) + '\\' + base64_encode(loginKO.password()); }

        credentials = '\\' + PKEY.SID + '\\' + encryptedString(PKEY.KEY, words);

        rsAjaxService.POST(PKEY.TYPE, '../' + SVC_URL, "Login", null,
            function (data, ajaxOptions, response) {
                if (base64_decode(data) == "AuthLGN") {
                    window.location = "../Home/Viagem";                    
                } else {
                    msgLogin("Erro ao realizar login");
                    logging = false;
                    $('#divLoaderLogin').hide();
                    $('#txtUsername').focus().select();
                }
            },
            function (xhr, ajaxOptions, thrownError) {
                switch (xhr.responseText) {
                    case 'InvalidUser':
                        msgLogin("Nome de usuário ou senha inválidos");
                        break;
                    case 'InvalidPassword':
                        msgLogin("Nome de usuário ou senha inválidos");
                        break;
                    case 'UserLogged':
                        msgLogin("O usuário já está logado em outra sessão.");
                        break;
                    case 'UserLocked':
                        msgLogin("Usuário bloqueado.");
                        break;
                    case 'ExpiredSession':
                        msgLogin("A sessão atual expirou.");
                        break;
                    default:
                        msgLogin("Erro ao realizar login.");
                }
                logging = false;
                $('#divLoaderLogin').hide();
                $('#txtUsername').focus().select();
            },
            function () {
                logging = false;
            },
            credentials);   
    }
};


function ChangeUserPasswordJS() {
    this.data = '';
};

function ResetLocalUserPassword() {

    var logged = getAuthorization();

    if (logged) {

        var words, encryptData;

        words =  base64_encode(pswKO.password()) + '\\' + base64_encode(pswKO.newPassword());        

        encryptData = encryptedString(new RSAKeyPair(getPKEY.EEP, "", getPKEY.MDS), words);

        var changeUserPassword = new ChangeUserPasswordJS();
        changeUserPassword.data = encryptData;

        rsAjaxService.POST('CSS', '../' + SVC_URL, "ChangeUserPassword", JSON.stringify(changeUserPassword),
         function (data) {
             if (data) {
                 switch (data) {
                     case -1:
                         AlertServerError('Erro na solicitação!');
                         break;
                     case -2:
                         AlertServerError('Senha atual incorreta. Verifique novamente.');
                         break;
                     case 1:
                         AlertServerError('Redefinição de senha realizada com sucesso!');
                         break;                  
                     default:
                         AlertServerError('Erro na solicitação!');
                         break;
                 }
             } else {
                 AlertServerError('Erro na solicitação!');
             }
         },
         function (msg) {
             AlertServerError();
         });
    }

};
