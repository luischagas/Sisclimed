function RSAKeyPair(a, b, c) { this.e = biFromHex(a); this.d = biFromHex(b); this.m = biFromHex(c); this.digitSize = 2 * biHighIndex(this.m) + 2; this.chunkSize = this.digitSize - 11; this.radix = 16; this.barrett = new BarrettMu(this.m) } function twoDigit(n) { return (n < 10 ? "0" : "") + String(n) } function encryptedString(c, s) { if (c.chunkSize > c.digitSize - 11) { return "Error" } var a = new Array(); var d = s.length; var i = 0; while (i < d) { a[i] = s.charCodeAt(i); i++ } var e = a.length; var f = ""; var j, k, block; for (i = 0; i < e; i += c.chunkSize) { block = new BigInt(); j = 0; var x; var g = (i + c.chunkSize) > e ? e % c.chunkSize : c.chunkSize; var b = new Array(); for (x = 0; x < g; x++) { b[x] = a[i + g - 1 - x] } b[g] = 0; var h = Math.max(8, c.digitSize - 3 - g); for (x = 0; x < h; x++) { b[g + 1 + x] = Math.floor(Math.random() * 254) + 1 } b[c.digitSize - 2] = 2; b[c.digitSize - 1] = 0; for (k = 0; k < c.digitSize; ++j) { block.digits[j] = b[k++]; block.digits[j] += b[k++] << 8 } var l = c.barrett.powMod(block, c.e); var m = c.radix == 16 ? biToHex(l) : biToString(l, c.radix); f += m + " " } return f.substring(0, f.length - 1) } function decryptedString(a, s) { var b = s.split(" "); var c = ""; var i, j, block; for (i = 0; i < b.length; ++i) { var d; if (a.radix == 16) { d = biFromHex(b[i]) } else { d = biFromString(b[i], a.radix) } block = a.barrett.powMod(d, a.d); for (j = 0; j <= biHighIndex(block) ; ++j) { c += String.fromCharCode(block.digits[j] & 255, block.digits[j] >> 8) } } if (c.charCodeAt(c.length - 1) == 0) { c = c.substring(0, c.length - 1) } return c }